name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create release
    runs-on: windows-latest
    outputs:
      id: ${{ steps.draft_release.outputs.id }}
      html_url: ${{ steps.draft_release.outputs.html_url }}
      upload_url: ${{ steps.draft_release.outputs.upload_url }}
    steps:
      - name: Draft release
        id: draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
      - name: Debug release
        run: |
          echo "${{ steps.draft_release.outputs.id }}"
          echo "${{ steps.draft_release.outputs.html_url }}"
          echo "${{ steps.draft_release.outputs.upload_url }}"

  second:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            console.log("This is the second step")
            console.log("${{ needs.create_release.outputs.id }}")

  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            validator_name: validator-linux.zip
            zip_name: plugin-linux.zip
            generator: Unix Makefiles
          - os: macos-latest
            validator_name: validator-mac.zip
            zip_name: plugin-mac.zip
            generator: Xcode
          - os: windows-latest
            validator_name: validator-win.zip
            zip_name: plugin-win.zip
            generator: Visual Studio 16 2019
    steps:
      - name: Debug level lower
        uses: actions/github-script@v3
        with:
          script: |
            console.log("This is the third step")
            console.log("${{ needs.create_release.outputs.id }}")

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install cmake gcc "libstdc++6" libx11-xcb-dev libxcb-util-dev libxcb-cursor-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libfontconfig1-dev libcairo2-dev libgtkmm-3.0-dev libsqlite3-dev libxcb-keysyms1-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install zip

      - name: Setup
        shell: bash
        run: |
          git submodule update --init --recursive
          cp -R -v ./vst2sdk/public.sdk/source/vst2.x ./vst3sdk/public.sdk/source

      - name: Build
        shell: bash
        run: |
          cmake \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMTG_ADD_VST3_PLUGINS_SAMPLES=ON \
            -DSMTG_ADD_VST3_HOSTING_SAMPLES=ON \
            -DSMTG_ADD_VSTGUI=OFF \
            -DSMTG_MYPLUGINS_SRC_PATH=./src \
            -S ./vst3sdk \
            -B ./build
          cmake --build ./build --config Release

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Metadata
        shell: bash
        run: |
          npm install @studiorack/studiorack-cli -g
          cp -v ./src/assets/* ./build/VST3/Release
          studiorack validate "./build/VST3/Release/**/*.{vst,vst3}"
          studiorack validate "./build/VST3/Release/**/*.{vst,vst3}" --metadata --zip

      - name: Upload
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log("This is the forth step")
            console.log("${{ needs.create_release.outputs.id }}")
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ needs.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./build/VST3/Release')) {
              if (path.extname(file) === '.zip') {
                console.log('file', file);
                console.log("This is the fifth step", release_id)
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./${file}`)
                });
              }
            }

      - name: Compress validator
        if: ${{ github.repository_owner == 'studiorack' }}
        shell: bash
        run: |
          cd ./build/bin/Release
          zip -r ../${{ matrix.validator_name }} *

      - name: Upload validator
        if: ${{ github.repository_owner == 'studiorack' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/bin/${{ matrix.validator_name }}
          asset_name: ${{ matrix.validator_name }}
          asset_content_type: application/zip

      - name: Upload metadata
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/VST3/Release/plugins.json
          asset_name: plugins.json
          asset_content_type: application/json

      - name: Publish release
        if: matrix.os == 'windows-latest'
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create_release.outputs.id }}
